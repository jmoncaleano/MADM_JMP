library(FuzzyNumbers)
library(devtools)

A1 <- FuzzyNumber(1, 2, 4, 7,
                  left=function(x) x,
                  right=function(x) 1-x)
plot(A1)

A1

#Definition by Side Functions

f <- splinefun(c(-4,-3.5,-3,-2.2,-2), c(0,0.4,0.7,0.9,1), method="monoH.FC")
g <- splinefun(c(-1,0,10), c(1,0.5,0), method="monoH.FC")

convertSide(f, -4, -2)(c(0,1))
convertSide(g, -1, 10)(c(0,1))

convertSide(g, 10, -1)(c(0,1)) # interesting


B <- FuzzyNumber(10,20,20,30,
                 left=convertSide(f, -4, -2),
                 right=convertSide(g, -1, 10)
)
plot(B, xlab=expression(x), ylab=expression(alpha))




#Definition by α-cut Bounds

A1 <- FuzzyNumber(1, 2, 4, 7,
                  left=function(x) x,
                  right=function(x) 1-x
)
A2 <- FuzzyNumber(1, 3, 4, 7,
                  lower=function(alpha) pbeta(alpha, 5, 9), # CDF of a beta distr.
                  upper=function(alpha) pexp(1/alpha-1) # transformed CDF of an exp. distr.
)
plot(A1, col="blue")
plot(A2, col="red", lty=2, add=TRUE)
legend("topright", c(expression(mu[A1]), expression(mu[A2])),
        col=c("blue", "red"), lty=c(1,2))

#Definition with Generating Functions Omitted: Shadowed Sets

A3 <- FuzzyNumber(1, 2, 4, 5)
A3

alphacut(A2, 0.5)
alphacut(A1, 0.5) #if define a FN solely by side generators cannot compute α-cuts

evaluate(A1, 6.5)
evaluate(A2, 6.5) #the same for lowe and upper function


#Using Numeric Approximations of α-cut or Side Generators

A2["lower"]
A2["upper"]

A1["left"]
A1["right"]


l <- function(x) pbeta(x, 1, 2)
r <- function(x) 1-pbeta(x, 1, 0.1)
A4 <- FuzzyNumber(-2, 0, 0, 2,
                  left = l,
                  right = r,
                  lower = approxInvert(l),
                  upper = approxInvert(r)
)

x <- seq(0,1,length.out=1e5)
max(abs(qbeta(x, 1, 2) - A4["lower"](x)))
max(abs(qbeta(1-x, 1, 0.1) - A4["upper"](x)))


#Trapezoidal Fuzzy Numbers

T1 <- TrapezoidalFuzzyNumber(1, 1.5, 4, 7)
cat(as.character(T1, toLaTeX=TRUE, varnameLaTeX="T_1"))

T1["left"]
T1["right"]
T1["lower"]
T1["upper"]

plot(TrapezoidalFuzzyNumber(1,2,2,3))
plot(as.TrapezoidalFuzzyNumber(c(2,3)))
plot(TrapezoidalFuzzyNumber(5,5,5,5))
plot(as.TrapezoidalFuzzyNumber(5))

#Piecewise Linear Fuzzy Numbers

P1 <- PiecewiseLinearFuzzyNumber(1, 2, 3, 4, 
                                 knot.n=1, 
                                 knot.alpha=0.25, 
                                 knot.left=1.5,
                                 knot.right=3.25)

P2 <- PiecewiseLinearFuzzyNumber(1, 2, 3, 4,
                                 knot.n=2, 
                                 knot.alpha=c(0.25,0.75), 
                                 knot.left=c(1.25, 1.65), 
                                 knot.right=c(3.15, 3.25))

plot(P1, type="b", from=0, to=5, xlim=c(0.5,4.5))
plot(P2, type="b", col=2, lty=2, pch=2, add=TRUE, from=0, to=5)

P2["allknots"]


P3 <- PiecewiseLinearFuzzyNumber(knot.left=c(0,0.5,0.7,1),
                           knot.right=c(2,2.2,2.4,3))["allknots"]

A10 <- TrapezoidalFuzzyNumber(1,2.5,4,7)


alpha <- c(0.3, 0.5, 0.7)
P3 <- as.PiecewiseLinearFuzzyNumber(
  A10,
  knot.n=3, knot.alpha=alpha
)
P3
## Piecewise linear fuzzy number with 3 knot(s),
## support=[1,7],
## core=[2.5,4].
plot(P3, type="b", from=-1, to=9, xlim=c(0,8))
abline(h=alpha, col="gray", lty=2)
abline(v=P3["knot.left"], col="gray", lty=3)
abline(v=P3["knot.right"], col="gray", lty=3)
text(7.5, alpha, sprintf("a=%g", alpha), pos=3)

# Fuzzy Numbers with Sides Given by Power Functions

X <- PowerFuzzyNumber(-3, -1, 1, 3, p.left=2, p.right=0.1)
class(X)
X
plot(X)



A <- FuzzyNumber(-5, 3, 6, 20,
                 left=function(x) pbeta(x,0.4,3),
                 right=function(x) 1-x^(1/4),
                 lower=function(alpha) qbeta(alpha,0.4,3),
                 upper=function(alpha) (1-alpha)^4
)
plot(A)



#Frecuencias

line <- c(0.2,0.4,0.6,0.8)
A <- TrapezoidalFuzzyNumber(0, 1.5, 1.5, 3)
B <- TrapezoidalFuzzyNumber(1.5, 2.25, 2.25, 2.5)
C <- TrapezoidalFuzzyNumber(0.5, 2, 2, 2.75)
D <- TrapezoidalFuzzyNumber(0, 1, 1, 2.5)
E <- TrapezoidalFuzzyNumber(0, 1, 1, 2.5)
plot(A, xlim=c(0,3.5))
plot(B, add=TRUE, col=2)
plot(C, add=TRUE, col=3)
plot(D, add=TRUE, col=4)
plot(E, add=TRUE, col=5)
abline(h=line, lty=2)
N <- c(A,B,C,D,E)

#Frecuencia Relativa

funcionfrec <- function(x, alp, n, m, k1, k2){
  conA <- ifelse((alphacut(x, alp)[1] >= k1 && alphacut(x, alp)[2] <= k2), 1, 0) # contenido
  intA <- ifelse(((alphacut(x, alp)[1] > k1 && alphacut(x, alp)[1] < k2 && alphacut(x, alp)[2] > k2) 
                  || (alphacut(x, alp)[1] < k1 && alphacut(x, alp)[2] > k1 && alphacut(x, alp)[2] < k2)
                  || (alphacut(x, alp)[1] < k1 && alphacut(x, alp)[2] > k2)
                  || conA == 1), 1, 0) # intercepto
  freccon <- (conA*m)/n
  frecint <- (intA*m)/n
  frecf <- ifelse(freccon == 0, frecint, freccon)
  return(c(freccon,frecint,frecf))
}

k1 <- 1
k2 <- 2

plot(0,0, xlim=c(0,1), ylim=c(0,1))

for (i in seq(0, 1, by = 0.2)) {
  for (n in 1:length(N)) {
    points(funcionfrec(N[[n]],i,length(N),n,k1,k2)[1],i, col=1)
    points(funcionfrec(N[[n]],i,length(N),n,k1,k2)[2],i, col=2)
    #points(funcionfrec(N[[n]],i,length(N),n,k1,k2)[3],i, col=1)
  }
}


##### Frecuencia distrbución empirica
alpha = 0.6
l <- c()
u <- c()
cl <- 0
cu <- 0

for (n in 1:length(N)) {
  l <- sort(c(l,alphacut(N[[n]], alpha)[1]))
  u <- sort(c(u,alphacut(N[[n]], alpha)[2]))
}

funclw <- function(x){
  for (i in 1:length(l)) {
    cl <- ifelse(l[i]<=x,1+cl,cl)
    lower <- ifelse(l[i]<x,l[i],l[i-1])
  }
  return(c(cl, lower))
}

funcup <- function(x){
  for (i in 1:length(u)) {
    cu <- ifelse(u[i]>=x,1+cu,cu) #Cambiamos a mayor
    upper <- ifelse(u[i]<x,u[i],u[i-1])
  }
  return(c(cu, upper))
}

lw <- funclw(2.2)
up <- funcup(2.2)
lw1 <- funclw(2.2)[1]/length(N)
up1 <- funcup(2.2)[1]/length(N)

p <- 0.75
probs <- c(seq(1/length(N), 1, by=1/length(N)))
p <- c(rep(p, length(N)))
escalon <- sum(probs<p)+1

u_p <- u[escalon]
l_p <- l[escalon]

plot(0,0, xlim=c(0,3), ylim=c(0,1))
for (i in 1:length(N)) {
  points(l[1],0,col=2)
  points(u[1],0,col=3)
  points(l[i],probs[i],col=2)
  points(u[i],probs[i],col=3)
}


line <- c(0.2,0.4,0.6,0.8)
A <- TrapezoidalFuzzyNumber(0, 1.5, 1.5, 3)
B <- TrapezoidalFuzzyNumber(1.5, 2.25, 2.25, 2.5)
C <- TrapezoidalFuzzyNumber(0.5, 2, 2, 2.75)
plot(A, xlim=c(0,3.5))
plot(B, add=TRUE, col=2)
plot(C, add=TRUE, col=3)
abline(h=line, lty=2)
N <- c(A,B,C)

