rm(list=ls())
cat("\014")


library(tidyverse)
library(tidyr)
library(ggplot2)
library(tabplot)
#library(GGally)
library(dummies)
#library(mice)
#library(Hmisc)
#library(outliers)
#library(lattice)
library(FNN)
library(caret)
#library(leaps)
library(scales)
library(rpart)
library(rpart.plot)

##Carga de datos
data <- read.csv("..//Black_Friday/BlackFriday.csv", header = TRUE, na.strings = "")
friday <- as_tibble(data)
attach(friday)
old.par = par()

# Propiedades básicas del set de datos
#str(friday)
#summary(friday)



#Data Frame sin factores
friday_nf <- data.frame(User_ID,Product_Category_1, 
                        Product_Category_2, Product_Category_3, 
                        Purchase)

##Evaluación de Datos
Factores <- matrix( c(length(unique(friday$User_ID)), length(unique(friday$Occupation)), 
                      length(unique(friday$Marital_Status)),  
                      length(unique(friday$Product_Category_1)),
                      length(unique(friday$Product_Category_2)), 
                      length(unique(friday$Product_Category_3)), 
                      length(unique(friday$Purchase))),
                    nrow = 1, ncol = 7)
dimnames(Factores) <- list("Factores", c("User_ID", "Occupation", "Marital_Status", 
                                         "Product_Category_1", "Product_Category_2", 
                                         "Product_Category_3", "Purchase"))

knitr::kable(Factores, caption = "Factores")

#Información No Disponible
# Todos al menos compraron un tipo de producto
nrow(filter(friday, is.na(friday$Product_Category_2) & is.na(friday$Product_Category_3) 
            & is.na(friday$Product_Category_1)))


##Limpieza de Datos

#Tema 1
#Missing data - Solo se tienen datos no disponibles en los productos 
#category 2 y 3, es normal
friday.na <- c()
for(j in 1:length(friday)){
  friday.na[j] <- sum(is.na(friday[,j]))
}
friday.na

na_names <- names(friday[,which(friday.na!=0)])

fil <- filter(friday, !is.na(Product_Category_2) & is.na(Product_Category_1))
cmp_2_no1 <- nrow(fil)
fil1 <- filter(friday, is.na(Product_Category_2) & !is.na(Product_Category_3))
cmp_3_no2 <- nrow(fil1)

na_names[1]


#Ouliers

par(old.par)
par(mfrow = c(3, 3))

boxplot(Purchase ~ Product_Category_1,
        data = friday,
        main = "Pruchase - Cat1")

boxplot(Purchase ~ Product_Category_2,
        data = friday,
        main = "Pruchase - Cat2")

boxplot(Purchase ~ Product_Category_3,
        data = friday,
        main = "Pruchase - Cat3")

boxplot(Purchase ~ Age,
        data = friday,
        main = "Pruchase - Age")

#Se distribuyen uniformemente
boxplot(Purchase ~ Gender,
        data = friday,
        main = "Pruchase - Genero")

#Se distribuyen uniformemente
boxplot(Purchase ~ Occupation,
        data = friday,
        main = "Pruchase - Ocupacion")

#Se distribuyen uniformemente
boxplot(Purchase ~ Marital_Status,
        data = friday,
        main = "Pruchase - Marital")

#Se distribuyen uniformemente en tipo A y B
boxplot(Purchase ~ City_Category,
        data = friday,
        main = "Pruchase - Ciudad")

#Se distribuyen uniformemente
boxplot(Purchase ~ Stay_In_Current_City_Years,
        data = friday,
        main = "Pruchase - Estancia")


#Total Purchase
par(old.par)
par(mfrow = c(1,2))
boxplot(friday$Purchase, 
        main = "Purchase",
        boxmex = 0.1)

hist(Purchase, freq = TRUE)

replace_outliers <- function(x, removeNA=FALSE){
  qrts <- quantile(x, probs = c(0.25, 0.75), na.rm = removeNA)
  caps <- quantile(x, probs = c(0.05, 0.95), na.rm = removeNA)
  h <- 1.5 * IQR(x)
  x[x<qrts[1]-h] <- caps[1]
  x[x>qrts[2]+h] <- caps[2]
  x 
}

friday$purchase_replace <- replace_outliers(Purchase)


par(old.par)
par(mfrow = c(1,2))
boxplot(friday$purchase_replace, 
        main = "Purchase",
        boxmex = 0.1)

hist(friday$purchase_replace, freq = TRUE)

#Categorizamos los valores de compras
break_f <- c(-Inf, 2500, 4500, 14000, 18000, Inf)
friday$Purchase_cat <- cut(friday$purchase_replace, breaks = break_f, labels = c("Very_low", "Low", 
                                                                             "Medium", "High", 
                                                                             "Very_high"))

#Distribución información tipo factor
friday_to_plot <- tablePrepare(friday)
tableplot(friday_to_plot, select = c(Product_ID, Gender, Age, City_Category, 
                                     Stay_In_Current_City_Years, Purchase_cat), 
          sortCol = Purchase_cat)


#Homogeneidad de la varianza en las compras respecto a sexo y edad

bwplot(friday$purchase_replace ~ friday$Age | friday$Gender, data = friday,
                             strip = strip.custom(bg = 'grey'),
                             cex = 1.0, layout = c(2, 1),
                             xlab = "Edades x Género", 
                             ylab = "Tasa de Compras",
                             par.settings = list(
                               box.rectangle = list(col = 5),
                               box.umbrella  = list(col = 2),
                               plot.symbol   = list(cex = 1.5, col = 1)),
                             scales = list(x = list(relation = "same"),
                                           y = list(relation = "same")))


#Agregación de las categorias y tipo de productos 

friday_product <- gather(friday, na.rm = TRUE,
                         key = "ProductCat",
                         value = "ProductType",
                         Product_Category_1, Product_Category_2, Product_Category_3)



category1 <- subset(friday_product, friday_product$ProductCat == "Product_Category_1")$purchase_replace
category2 <- subset(friday_product, friday_product$ProductCat == "Product_Category_2")$purchase_replace
category3 <- subset(friday_product, friday_product$ProductCat == "Product_Category_3")$purchase_replace

par(old.par)

par(mfrow = c(3,1))

hist(category1, prob = TRUE, xlab = "Categoria1", main = "Compras Categoria 1")
lines(density(category1))
abline(v = mean(category1), col = "red")
abline(v = median(category1), col = "blue")

hist(category2, prob = TRUE, xlab = "Categoria2", main = "Compras Categoria 2")
lines(density(category2))
abline(v = mean(category2), col = "red")
abline(v = median(category2), col = "blue")

hist(category3, prob = TRUE, xlab = "Categoria3", main = "Compras Categoria 3")
lines(density(category3))
abline(v = mean(category3), col = "red")
abline(v = median(category3), col = "blue")

par(old.par)

a1 <- friday %>% ggplot(aes(x=Gender,y=purchase_replace,fill=Gender))+geom_boxplot()+
  theme(legend.position="none")
a2 <- friday %>% ggplot(aes(x=Occupation,y=purchase_replace,
                            fill=as.factor(Occupation)))+geom_boxplot()+
  theme(legend.position="none")
a3 <- friday %>% ggplot(aes(x=as.factor(Marital_Status),y=purchase_replace,
                            fill=as.factor(Marital_Status)))+geom_boxplot()+
  theme(legend.position="none")

gridExtra::grid.arrange(a1,a2,a3)

a4 <- friday %>% ggplot(aes(x=Age,y=purchase_replace,
                      fill=Age))+geom_boxplot()+
  theme(legend.position="none")

a5 <- friday %>% ggplot(aes(x=City_Category,y=purchase_replace,
                      fill=City_Category))+geom_boxplot()+
  theme(legend.position="none")

a6 <- friday %>% ggplot(aes(x=Stay_In_Current_City_Years,y=purchase_replace,
                            fill=Stay_In_Current_City_Years))+geom_boxplot()+
  theme(legend.position="none")

gridExtra::grid.arrange(a4,a5,a6)

p1 <- friday %>% ggplot(aes(x=as.factor(Product_Category_1),y=purchase_replace,
                            fill=as.factor(Marital_Status)))+geom_boxplot()
p2 <- friday %>% na.omit() %>% ggplot(aes(x=as.factor(Product_Category_2),y=purchase_replace,
                            fill=as.factor(Marital_Status)))+geom_boxplot()
p3 <-friday %>% na.omit() %>% ggplot(aes(x=as.factor(Product_Category_3),y=purchase_replace,
                           fill=as.factor(Marital_Status)), na.rm = TRUE)+geom_boxplot()


gridExtra::grid.arrange(p1,p2,p3)


p4 <- friday %>% ggplot(aes(x=as.factor(Product_Category_1),y=purchase_replace,
                            fill=Gender))+geom_boxplot()
p5 <- friday %>% na.omit() %>% ggplot(aes(x=as.factor(Product_Category_2),y=purchase_replace,
                            fill=Gender))+geom_boxplot()
p6 <-friday %>% na.omit() %>% ggplot(aes(x=as.factor(Product_Category_3),y=purchase_replace,
                           fill=Gender), na.rm = TRUE)+geom_boxplot()

gridExtra::grid.arrange(p4,p5,p6)

p7 <- friday %>% na.omit() %>% group_by(Product_Category_1) %>% count() %>% 
  ggplot(aes(x=reorder(Product_Category_1,n),y=n))+
  geom_col(aes(fill=as.factor(Product_Category_1)))+
  labs(x="",y="",title="Categoria 1")+theme(legend.position="none")

p8 <- friday %>% na.omit() %>% group_by(Product_Category_2) %>% count() %>% 
  ggplot(aes(x=reorder(Product_Category_2,n),y=n))+
  geom_col(aes(fill=as.factor(Product_Category_2)))+
  labs(x="",y="",title="Cateogoria 2")+theme(legend.position="none")

p9 <- friday %>% na.omit() %>% group_by(Product_Category_3) %>% count() %>% 
  ggplot(aes(x=reorder(Product_Category_3,n),y=n))+
  geom_col(aes(fill=as.factor(Product_Category_3)))+
  labs(x="",y="",title="Categoria 3")+theme(legend.position="none")

gridExtra::grid.arrange(p7,p8,p9)

friday_user <- friday %>% group_by(User_ID) %>% summarise(Purchase=sum(purchase_replace), 
                                                          Cantidad=n(),
                                                          Genero = unique(Gender),
                                                          Marital = unique(Marital_Status),
                                                          City_Category = unique(City_Category),
                                                          Age = unique(Age),
                                                          Stay_City = unique(Stay_In_Current_City_Years),
                                                          occupation = as.factor(unique(Occupation))) %>% data.frame()



friday_user %>% ggplot()+
  geom_bar(stat = "identity", mapping = (aes(x=Age, y=Purchase, 
                                             color= occupation)))+
  facet_wrap(~City_Category, nrow = 2)


friday_user %>% ggplot()+ geom_bar(stat = "identity", mapping = (aes(x=Age, y=Purchase, color= occupation)))+facet_wrap(~City_Category, nrow = 2)


friday_user %>% ggplot()+ geom_bar(stat = "identity", mapping = (aes(x=Age, y=Purchase, color = Stay_City)))+ facet_wrap(~City_Category, nrow = 2)+ coord_polar()

## Partición de Datos
set.seed(42) # semilla

train.size = dim(friday)[1] * 0.7 
train = sample(1:dim(friday)[1], train.size)
test = -train
datos.train = friday[train, ]
datos.test = friday[test, ]


#Regresión

#Error cuadrático medio
rmse <- function(act, pred){
  return(sqrt(mean((act - pred)^2)))
}

#KNN - Edad

friday_temp1 <- data.frame(friday$Product_ID, friday$Age, friday$Gender, 
                           friday$Marital_Status, friday$City_Category, 
                           friday$purchase_replace, friday$Purchase_cat)

friday_cat <- dummy.data.frame(data.frame(friday_temp1), names = c("friday.Age"), 
                               sep = ".")

set.seed(42) # semilla

friday_cat_temp = sample(1:dim(friday_cat)[1], (dim(friday_cat)[1] * 0.5))
friday_cat1 = friday_cat[friday_cat_temp, ]
train.id <- createDataPartition(friday_cat1$friday.purchase_replace, p = 0.7, list = FALSE)
train <- friday_cat1[train.id, ]
temp <- friday_cat1[-train.id, ]
val.id <- createDataPartition(temp$friday.purchase_replace, p = 0.5, list = FALSE)
validate <- temp[val.id, ]
test <- temp[-val.id, ]

reg1 <- knn.reg(train[,2:8], 
                validate[, 2:8], train$friday.purchase_replace, k=5,
                algorithm = "brute")

rmse(validate$friday.purchase_replace, reg1$pred)

reg1_test <- knn.reg(train[,2:8], 
                test[, 2:8], train$friday.purchase_replace, k=5,
                algorithm = "brute")

rmse(test$friday.purchase_replace, reg1_test$pred)

test$pred <- reg1_test$pred


test$actual_cat <- cut(test$friday.purchase_replace, breaks = break_f, labels = c("Very_low", "Low", 
                                                                                "Medium", "High", 
                                                                                "Very_high"))

test$pred_cat <- cut(test$pred, breaks = break_f, labels = c("Very_low", "Low", 
                                                           "Medium", "High", 
                                                           "Very_high"))

table(test$actual_cat, test$pred_cat, dnn = c("Actual", "Predecido"))

mean(test$friday.purchase_replace)

quantile(test$friday.purchase_replace)
quantile(reg1_test$pred)



#KNN - Genero

friday_cat_G <- dummy.data.frame(data.frame(friday_temp1), names = c("friday.Gender"), sep = ".")

set.seed(42) # semilla

friday_cat_temp_G = sample(1:dim(friday_cat_G)[1], (dim(friday_cat_G)[1] * 0.5))
friday_cat1_G = friday_cat_G[friday_cat_temp_G, ]
train.id_G <- createDataPartition(friday_cat1_G$friday.purchase_replace, p = 0.7, list = FALSE)
train_G <- friday_cat1_G[train.id_G, ]
temp_G <- friday_cat1_G[-train.id_G, ]
val.id_G <- createDataPartition(temp_G$friday.purchase_replace, p = 0.5, list = FALSE)
validate_G <- temp_G[val.id_G, ]
test_G <- temp_G[-val.id_G, ]

reg1_G <- knn.reg(train_G[,3:4], 
                validate_G[, 3:4], train_G$friday.purchase_replace, k=5,
                algorithm = "brute")

rmse(validate_G$friday.purchase_replace, reg1_G$pred)

reg1_test_G <- knn.reg(train_G[,3:4], 
                     test_G[, 3:4], train_G$friday.purchase_replace, k=5,
                     algorithm = "brute")

rmse(test_G$friday.purchase_replace, reg1_test_G$pred)

test_G$pred <- reg1_test_G$pred

view(test_G)


#KNN - Genero + Edad + Marital

friday_cat_G <- dummy.data.frame(data.frame(friday_temp1), names = c("friday.Age"), sep = ".")
friday_cat_G <- dummy.data.frame(data.frame(friday_cat_G), names = c("friday.Gender"), sep = ".")

set.seed(42) # semilla

friday_cat_temp_G = sample(1:dim(friday_cat_G)[1], (dim(friday_cat_G)[1] * 0.1))
friday_cat1_G = friday_cat_G[friday_cat_temp_G, ]
train.id_G <- createDataPartition(friday_cat1_G$friday.purchase_replace, p = 0.6, list = FALSE)
train_G <- friday_cat1_G[train.id_G, ]
temp_G <- friday_cat1_G[-train.id_G, ]
val.id_G <- createDataPartition(temp_G$friday.purchase_replace, p = 0.5, list = FALSE)
validate_G <- temp_G[val.id_G, ]
test_G <- temp_G[-val.id_G, ]

reg1_G <- knn.reg(train_G[,2:11], 
                  validate_G[, 2:11], train_G$friday.purchase_replace, k=10,
                  algorithm = "brute")

rmse(validate_G$friday.purchase_replace, reg1_G$pred)

reg1_test_G <- knn.reg(train_G[,2:11], 
                       test_G[, 2:11], train_G$friday.purchase_replace, k=10,
                       algorithm = "brute")

rmse(test_G$friday.purchase_replace, reg1_test_G$pred)

test_G$pred <- reg1_test_G$pred

view(test_G)


#KNN - Genero + Edad + Marital + City.Category

friday_cat_G <- dummy.data.frame(data.frame(friday_temp1), names = c("friday.Age"), sep = ".")
friday_cat_G <- dummy.data.frame(data.frame(friday_cat_G), names = c("friday.Gender"), sep = ".")
friday_cat_G <- dummy.data.frame(data.frame(friday_cat_G), names = c("friday.City_Category"), sep = ".")

set.seed(42) # semilla

friday_cat_temp_G = sample(1:dim(friday_cat_G)[1], (dim(friday_cat_G)[1] * 1))
friday_cat1_G = friday_cat_G[friday_cat_temp_G, ]
train.id_G <- createDataPartition(friday_cat1_G$friday.purchase_replace, p = 0.6, list = FALSE)
train_G <- friday_cat1_G[train.id_G, ]
temp_G <- friday_cat1_G[-train.id_G, ]
val.id_G <- createDataPartition(temp_G$friday.purchase_replace, p = 0.5, list = FALSE)
validate_G <- temp_G[val.id_G, ]
test_G <- temp_G[-val.id_G, ]

reg1_G <- knn.reg(train_G[,2:14], 
                  validate_G[, 2:14], train_G$friday.purchase_replace, k=1,
                  algorithm = "brute")

rmse(validate_G$friday.purchase_replace, reg1_G$pred)

reg1_test_G <- knn.reg(train_G[,2:14], 
                       test_G[, 2:14], train_G$friday.purchase_replace, k=1,
                       algorithm = "brute")

rmse(test_G$friday.purchase_replace, reg1_test_G$pred)

test_G$pred <- reg1_test_G$pred

view(test_G)


test_G$actual_cat <- cut(test_G$friday.purchase_replace, breaks = 5, labels = c("Very_low", "Low", 
                                                                   "Medium", "High", 
                                                                   "Very_high"))


test_G$pred_cat <- cut(test_G$pred, breaks = 5, labels = c("Very_low", "Low", 
                                                           "Medium", "High", 
                                                           "Very_high"))

table(test_G$actual_cat, test_G$pred_cat, dnn = c("Actual", "Predecido"))

quantile(test_G$friday.purchase_replace)
quantile(test_G$pred)


test_G %>% filter(test_G$friday.purchase_replace==187)


# Clasificación
#Arbol


friday_user <- friday %>% group_by(User_ID) %>% summarise(Purchase=sum(purchase_replace), 
                                                          Cantidad=n(),
                                                          Genero = unique(Gender),
                                                          Marital = unique(Marital_Status),
                                                          City_Category = unique(City_Category),
                                                          Age = unique(Age),
                                                          Stay_City = unique(Stay_In_Current_City_Years),
                                                          occupation = as.factor(unique(Occupation))) %>% data.frame()

friday_user$Purchase_replace <- replace_outliers(friday_user$Purchase, removeNA = F)

friday_user$purchase_cat <- cut(friday_user$Purchase_replace, breaks = 5, labels = c("Very_low", "Low", 
                                                                                "Medium", "High", 
                                                                                "Very_high"))

friday_user <- friday_user %>% mutate(Age_cat = ifelse(Age == "0-17", 1, Age))

set.seed(42)
train_u.id_G <- createDataPartition(friday_user$purchase_cat, p = 0.7, list = FALSE)
train_u <- friday_user[train_u.id_G, ]
test_u <- friday_user[-train_u.id_G, ]


tree_cantidad <- rpart(purchase_cat ~ Cantidad, 
              data = friday_user[train_u.id_G,],
              method = "class", control = rpart.control(minsplit = 20, cp = 0.01))

tree_cantidad$cptable

tree_cantidad_pruned <- prune(tree_cantidad, tree_cantidad$cptable[4, "CP"])

par(mfrow = c(1,1))

prp(tree_cantidad, type = 2, extra = 104, nn = TRUE, fallen.leaves = TRUE, roundint = F, faclen = 4,
    varlen = 8)

pred.pruned <- predict(tree_cantidad, friday_user[-train_u.id_G, ], type = "class")

table(friday_user[-train_u.id_G, ]$purchase_cat, pred.pruned, dnn = c("Actual", "Predicho"))

#Tipo producto

friday_prod <- friday %>% group_by(Product_ID) %>% summarise(Purchase=sum(purchase_replace), 
                                                             Cantidad=n(),
                                                             Genero_M = sum(Gender == "M"),
                                                             Genero_F = sum(Gender == "F"),
                                                             Soltero = sum(Marital_Status == 0),
                                                             Casado = sum(Marital_Status == 1),
                                                             CiudadA = sum(City_Category == "A"),
                                                             CiudadB = sum(City_Category == "B"),
                                                             CiudadC = sum(City_Category == "C")) %>% data.frame()



friday_prod$Purchase_replace <- replace_outliers(friday_prod$Purchase, removeNA = F)

friday_prod$purchase_cat <- cut(friday_prod$Purchase_replace, breaks = 5, labels = c("Very_low", "Low", 
                                                                                     "Medium", "High", 
                                                                                     "Very_high"))

set.seed(42)
train_p.id_G <- createDataPartition(friday_prod$purchase_cat, p = 0.7, list = FALSE)
train_p <- friday_prod[train_p.id_G, ]
test_p <- friday_prod[-train_p.id_G, ]


tree_cantidad_p <- rpart(purchase_cat ~ Cantidad, 
                       data = friday_prod[train_p.id_G,],
                       method = "class", control = rpart.control(minsplit = 20, cp = 0.01))

tree_cantidad_p$cptable

#tree_cantidad_pruned <- prune(tree_cantidad, tree_cantidad$cptable[4, "CP"])

prp(tree_cantidad_p, type = 2, extra = 104, nn = TRUE, fallen.leaves = TRUE, roundint = F, faclen = 4,
    varlen = 8)

pred.pruned_p <- predict(tree_cantidad_p, friday_prod[-train_p.id_G, ], type = "class")

table(friday_prod[-train_p.id_G, ]$purchase_cat, pred.pruned_p, dnn = c("Actual", "Predicho"))



#Tipo Producto

friday_product$Purchase_replace <- replace_outliers(friday_product$Purchase, removeNA = F)


friday_product_type <- friday_product %>% group_by(User_ID) %>% summarise(Cantidad = n(),
                                                                              Purchase=sum(purchase_replace),
                                                                              Categoria1=sum(ProductCat=="Product_Category_1"),
                                                                              Categoria2=sum(ProductCat=="Product_Category_2"),
                                                                              Categoria3=sum(ProductCat=="Product_Category_3")) %>% data.frame()


friday_product_type$purchase_cat <- cut(friday_product_type$Purchase, breaks = 5, labels = c("Very_low", "Low", 
                                                                                             "Medium", "High", 
                                                                                             "Very_high"))



set.seed(42)
train_tp.id_G <- createDataPartition(friday_product_type$purchase, p = 0.7, list = FALSE)
train_tp <- friday_product_type[train_tp.id_G, ]
test_tp <- friday_product_type[-train_tp.id_G, ]


tree_cantidad_tp <- rpart(purchase_cat ~ Categoria1 + Categoria2 + Categoria3, 
                         data = friday_product_type[train_tp.id_G,],
                         method = "class", control = rpart.control(minsplit = 20, cp = 0.01))

tree <- rpart(Purchase_cat ~ Product_Category_1 + Age + City_Category + 
                Stay_In_Current_City_Years + Gender,
              data = datos.train, method = "class", 
              control = rpart.control(minsplit = 20, cp = 0.01))

tree$cptable

par(old.par)

prp(tree, type = 2, extra = 104, nn = TRUE, fallen.leaves = TRUE, roundint = F, faclen = 4,
    varlen = 8)

tree_pruned <- prune(tree, tree$cptable[4, "CP"])

pred.tree <- predict(tree, datos.test, type = "class")

table(datos.test$Purchase_cat, pred.tree, dnn = c("Actual", "Predicho"))



friday_city <- friday %>% group_by(City_Category) %>% summarise(Purchase=sum(purchase_replace),
                                                                Cantidad=n(),
                                                                Genero_M = sum(Gender == "M"),
                                                                Genero_F = sum(Gender == "F"),
                                                                Soltero = sum(Marital_Status == 0),
                                                                Casado = sum(Marital_Status == 1)) %>% data.frame()


#Random Forest
friday_rf <- friday %>% select(Gender:Product_Category_3, Purchase_cat, purchase_replace) 


friday_rf <- mutate(friday_rf, Product2 = as.integer(!is.na(Product_Category_2)), 
                Product3 = as.integer(!is.na(Product_Category_3)))

friday_rf <- friday_rf[, -c(8,9)]

sum(is.na(friday_rf$Purchase_cat))

set.seed(42)

muestra <- sample(dim(friday_rf)[1], size = dim(friday_rf)[1]*0.1)
length(muestra)
train <- friday_rf[muestra,]
test <- friday_rf[-muestra,]

k <- 9
rf.OOB <- c() 
for(j in 1:k){
  rf = randomForest(Purchase_cat ~. -purchase_replace,
                    data=train, ntree=500, mtry = j)
  rf.OOB[j] <- mean(rf$err.rate[,"OOB"])
}

mintry <- which.min(rf.OOB[1:9])
set.seed(42)
rf = randomForest(Purchase_cat~.,data=train, ntree=500, mtry = mintry)
OOB <-mean(rf$err.rate[,"OOB"])
plot(rf, main = "Error OOB por categoria")
rf.pred = predict(rf,test)
rf.cc = mean(rf.pred==test$Purchase_cat)
A <- as.matrix(table(rf.pred, test$Purchase_cat))
A



###

rf.OOB <- c() 
for(j in 1:k){
  rf = randomForest(Product_Category_1 ~. -Purchase_cat,
                    data=train, ntree=500, mtry = j)
  rf.OOB[j] <- mean(rf$err.rate[,"OOB"])
}

mintry <- which.min(rf.OOB)
set.seed(42)
rf = randomForest(Product_Category_1~.-Purchase_cat,data=train, ntree=500, mtry = mintry)
OOB <-mean(rf$err.rate[,"OOB"])
plot(rf, main = "Error OOB por categoria")
rf.pred = predict(rf,test)
rf.cc = mean(rf.pred==test$Product_Category_1)
A <- as.matrix(table(rf.pred, test$Product_Category_1))
rf.pred
A
rf.cc
