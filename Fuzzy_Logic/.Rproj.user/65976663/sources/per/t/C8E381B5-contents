---
title: "Untitled"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(FuzzyNumbers)
library(devtools)
```

```{r cars}
#Frecuencias

line <- c(0.2,0.4,0.6,0.8)
A <- TrapezoidalFuzzyNumber(0, 1.5, 1.5, 3)
B <- TrapezoidalFuzzyNumber(1.5, 2.25, 2.25, 2.5)
C <- TrapezoidalFuzzyNumber(0.5, 2, 2, 2.75)
D <- TrapezoidalFuzzyNumber(0, 1, 1, 2.5)
E <- TrapezoidalFuzzyNumber(0, 1, 1, 2.5)
plot(A, xlim=c(0,3.5))
plot(B, add=TRUE, col=2)
plot(C, add=TRUE, col=3)
plot(D, add=TRUE, col=4)
plot(E, add=TRUE, col=5)
abline(h=line, lty=2)
N <- c(A,B,C,D,E)

#Frecuencia Relativa

funcionfrec <- function(x, alp, n, m, k1, k2){
  conA <- ifelse((alphacut(x, alp)[1] >= k1 && alphacut(x, alp)[2] <= k2), 1, 0) # contenido
  intA <- ifelse(((alphacut(x, alp)[1] > k1 && alphacut(x, alp)[1] < k2 && alphacut(x, alp)[2] > k2) 
                  || (alphacut(x, alp)[1] < k1 && alphacut(x, alp)[2] > k1 && alphacut(x, alp)[2] < k2)
                  || (alphacut(x, alp)[1] < k1 && alphacut(x, alp)[2] > k2)
                  || conA == 1), 1, 0) # intercepto
  freccon <- (conA*m)/n
  frecint <- (intA*m)/n
  frecf <- ifelse(freccon == 0, frecint, freccon)
  return(c(freccon,frecint,frecf))
}

k1 <- 1
k2 <- 2

plot(0,0, xlim=c(0,1), ylim=c(0,1))

for (i in seq(0, 1, by = 0.2)) {
  for (n in 1:length(N)) {
    points(funcionfrec(N[[n]],i,length(N),n,k1,k2)[1],i, col=1)
    points(funcionfrec(N[[n]],i,length(N),n,k1,k2)[2],i, col=2)
    #points(funcionfrec(N[[n]],i,length(N),n,k1,k2)[3],i, col=1)
  }
}


##### Frecuencia distrbuciÃ³n empirica
alpha = 0.6
l <- c()
u <- c()
cl <- 0
cu <- 0

for (n in 1:length(N)) {
  l <- sort(c(l,alphacut(N[[n]], alpha)[1]))
  u <- sort(c(u,alphacut(N[[n]], alpha)[2]))
}

funclw <- function(x){
  for (i in 1:length(l)) {
    cl <- ifelse(l[i]<=x,1+cl,cl)
    lower <- ifelse(l[i]<x,l[i],l[i-1])
  }
  return(c(cl, lower))
}

funcup <- function(x){
  for (i in 1:length(u)) {
    cu <- ifelse(u[i]>=x,1+cu,cu) #Cambiamos a mayor
    upper <- ifelse(u[i]<x,u[i],u[i-1])
  }
  return(c(cu, upper))
}

lw <- funclw(2.2)
up <- funcup(2.2)
lw1 <- funclw(2.2)[1]/length(N)
up1 <- funcup(2.2)[1]/length(N)

p <- 0.75
probs <- c(seq(1/length(N), 1, by=1/length(N)))
p <- c(rep(p, length(N)))
escalon <- sum(probs<p)+1

u_p <- u[escalon]
l_p <- l[escalon]

plot(0,0, xlim=c(min(l)-1,max(u)+1), ylim=c(0,1))
for (i in 1:length(N)) {
  points(l[1],0,col=2)
  points(u[1],0,col=3)
  points(l[i],probs[i],col=2)
  points(u[i],probs[i],col=3)
}


# line <- c(0.2,0.4,0.6,0.8)
# A <- TrapezoidalFuzzyNumber(0, 1.5, 1.5, 3)
# B <- TrapezoidalFuzzyNumber(1.5, 2.25, 2.25, 2.5)
# C <- TrapezoidalFuzzyNumber(0.5, 2, 2, 2.75)
# plot(A, xlim=c(0,3.5))
# plot(B, add=TRUE, col=2)
# plot(C, add=TRUE, col=3)
# abline(h=line, lty=2)
# N <- c(A,B,C)

```

