u <- c()
for (i in seq(0,1,by = 0.5)) {
for (n in 1:length(fuzz_euro)) {
l <- sort(c(l,alphacut(fuzz_euro[[n]], i)[1]))
u <- sort(c(u,alphacut(fuzz_euro[[n]], i)[2]))
}
}
p <- 0.5
probs <- c(seq(1/length(fuzz_euro), 1, by=1/length(fuzz_euro)))
p <- c(rep(p, length(fuzz_euro)))
escalon <- sum(probs<p)+1
u_p <- u[escalon]
l_p <- l[escalon]
View(europa)
l <- c()
u <- c()
alpha <- 0.2
for (n in 1:length(fuzz_euro)) {
l <- sort(c(l,alphacut(fuzz_euro[[n]], alpha)[1]))
u <- sort(c(u,alphacut(fuzz_euro[[n]], alpha)[2]))
}
p <- 0.5
probs <- c(seq(1/length(fuzz_euro), 1, by=1/length(fuzz_euro)))
p <- c(rep(p, length(fuzz_euro)))
escalon <- sum(probs<p)+1
u_p <- u[escalon]
l_p <- l[escalon]
alpha <- 0.8
l <- c()
u <- c()
alpha <- 0.8
for (n in 1:length(fuzz_euro)) {
l <- sort(c(l,alphacut(fuzz_euro[[n]], alpha)[1]))
u <- sort(c(u,alphacut(fuzz_euro[[n]], alpha)[2]))
}
p <- 0.5
probs <- c(seq(1/length(fuzz_euro), 1, by=1/length(fuzz_euro)))
p <- c(rep(p, length(fuzz_euro)))
escalon <- sum(probs<p)+1
u_p <- u[escalon]
l_p <- l[escalon]
alpha <- 1
for (n in 1:length(fuzz_euro)) {
l <- sort(c(l,alphacut(fuzz_euro[[n]], alpha)[1]))
u <- sort(c(u,alphacut(fuzz_euro[[n]], alpha)[2]))
}
p <- 0.5
probs <- c(seq(1/length(fuzz_euro), 1, by=1/length(fuzz_euro)))
p <- c(rep(p, length(fuzz_euro)))
escalon <- sum(probs<p)+1
u_p <- u[escalon]
l_p <- l[escalon]
p <- 0.75
probs <- c(seq(1/length(fuzz_euro), 1, by=1/length(fuzz_euro)))
p <- c(rep(p, length(fuzz_euro)))
escalon <- sum(probs<p)+1
u_p <- u[escalon]
l_p <- l[escalon]
median(europa$Judicial_Effectiveness)
l <- c()
u <- c()
for (i in seq(0,1,by = 0.2)) {
for (n in 1:length(fuzz_euro)) {
l <- sort(c(l,alphacut(fuzz_euro[[n]], i)[1]))
u <- sort(c(u,alphacut(fuzz_euro[[n]], i)[2]))
}
}
p <- 0.5
probs <- c(seq(1/length(fuzz_euro), 1, by=1/length(fuzz_euro)))
p <- c(rep(p, length(fuzz_euro)))
escalon <- sum(probs<p)+1
u_p <- u[escalon]
l_p <- l[escalon]
TrapezoidalFuzzyNumber(l_p, l_p, u_p, u_p)
plot(TrapezoidalFuzzyNumber(l_p, l_p, u_p, u_p))
mediana <- TrapezoidalFuzzyNumber(l_p, l_p, u_p, u_p)
distance(fuzz_euro, mediana)
distance(fuzz_euro, mediana)
distance(fuzz_euro[[1]], mediana)
expectedValue(mediana)
?distance
distance(mediana, fuzz_euro[[1]])
mediana1 <- TrapezoidalFuzzyNumber(l_p, expectedValue(mediana), expectedValue(mediana), u_p)
distance(mediana1, fuzz_euro[[1]])
distancias <- c()
for(i in 1:length(fuzz_euro)){
distancias <- c(distancias, distance(fuzz_euro[[i]],mediana))
}
min(distancias)
distancias
europa %>% select(id == 37)
europa
which.min(distancias)
which(europa$Country == 37)
which(europa$Country[37])
which(europa$Country[,37])
europa$Country[,37]
europa$Country[37]
europa$Country[37][1]
europa$Country[which.min(distancias)][1]
View(europa)
crisp_median <- europa$Country[which(median(europa$Judicial_Effectiveness))][1]
which(median(europa$Judicial_Effectiveness))
median(europa$Judicial_Effectiveness)
europa %>% select(Country, Judicial_Effectiveness) %>% filter(Judicial_Effectiveness==median(europa$Judicial_Effectiveness))
which(europa$Country | europa$Judicial_Effectiveness==51.75)
which(europa$Country | europa$Judicial_Effectiveness=51.75)
europa$Judicial_Effectiveness==51.75
europa$Judicial_Effectiveness==51.7
round(median(europa$Judicial_Effectiveness),1)
europa %>% filter(europa$Judicial_Effectiveness < median(europa$Judicial_Effectiveness)|| europa$Judicial_Effectiveness >= median(europa$Judicial_Effectiveness))
europa %>% filter(europa$Judicial_Effectiveness = 51.7))
europa %>% filter(europa$Judicial_Effectiveness == 51.7))
europa %>% filter(europa$Judicial_Effectiveness == 51.7)
europa %>% filter(europa$Judicial_Effectiveness == 51.7) %>% select(Country)
crisp_median <- europa %>% filter(europa$Judicial_Effectiveness == median(europa$Judicial_Effectiveness)) %>% select(Country)
europa %>% filter(europa$Judicial_Effectiveness == 51.7) %>% select(Country)
trunc(median(europa$Judicial_Effectiveness))
trunc(median(europa$Judicial_Effectiveness),1)
trunc(median(europa$Judicial_Effectiveness),2)
trunc(median(europa$Judicial_Effectiveness))
signif(median(europa$Judicial_Effectiveness))
signif(median(europa$Judicial_Effectiveness),1)
signif(median(europa$Judicial_Effectiveness),2)
signif(median(europa$Judicial_Effectiveness),3)
signif(median(europa$Judicial_Effectiveness),-3)
floor(median(europa$Judicial_Effectiveness))
floor(median(europa$Judicial_Effectiveness),2)
for(i in 1:nrow(europa)){
distancias_c <- c(distancias_c, median(europa$Judicial_Effectiveness)-
europa$Judicial_Effectiveness[i])
}
distancias_c <- c()
for(i in 1:nrow(europa)){
distancias_c <- c(distancias_c, median(europa$Judicial_Effectiveness)-
europa$Judicial_Effectiveness[i])
}
which.min(distancias)
which.min(distancias_c)
europa$Country[which.min(distancias_c)][1]
min(distancias_c)
distancias_c
distancias_c > 0
(distancias_c > 0)[1]
View(datos)
datos[4][1]
datos[4,1]
datos[4,4]
datos[4,4]-datos$cota[4]
str(datos)
View(datos1)
datos2 <- datos[-cota, -cota2, -JE]
datos2 <- datos[-cota]
datos2 <- datos[-datos$cota]
datos2 <- datos
datos2$cota <- NULL
datos2
View(datos2)
datos2$JE <- NULL
View(datos2)
funcion_sc <- function(i,j){
AL <- datos2[i,j]-datos$cota[i]
AI1 <- datos2[i,j]
AI2 <- datos2[i,j]
AU <- datos2[i,j]+datos$cota[i]
A <- TrapezoidalFuzzyNumber(AL,AI1, AI2, AU)
return (A)
}
fuzz_sc <- c()
for (i in 1:nrow(datos2)) {
for (j in 4:length(datos2)) {
fuzz_sc <- c(fuzz_sc, funcion_sc(i,j))
}
}
for (i in 1:nrow(datos2)) {
for (j in 4:length(datos2)) {
fuzz_sc <- c(fuzz_sc, funcion_sc(i,j))
}
}
fuzz_sc <- as.matrix()
fuzz_sc <- as.matrix(nrow(datos2), length(datos2))
for (i in 1:nrow(datos2)) {
for (j in 4:length(datos2)) {
fuzz_sc <- c(fuzz_sc, funcion_sc(i,j))
}
}
View(fuzz_sc)
fuzz_sc <- matrix(nrow(datos2), length(datos2))
for (i in 1:nrow(datos2)) {
for (j in 4:length(datos2)) {
fuzz_sc <- c(fuzz_sc, funcion_sc(i,j))
}
}
for (i in 1:nrow(datos2)) {
for (j in 4:length(datos2)) {
fuzz_sc <- matrix(fuzz_sc, funcion_sc(i,j))
}
}
fuzz_sc <- matrix(funcion_sc(i,j))
for (i in 1:nrow(datos2)) {
for (j in 4:length(datos2)) {
fuzz_sc <- matrix(funcion_sc(i,j))
}
}
fuzz_sc <- c()
funcion_sc <- function(i,j){
AL <- datos2[i,j]-datos$cota[i]
AI1 <- datos2[i,j]
AI2 <- datos2[i,j]
AU <- datos2[i,j]+datos$cota[i]
A <- TrapezoidalFuzzyNumber(AL,AI1, AI2, AU)
return (A)
}
SC <- TrapezoidalFuzzyNumber(0,0,0,0)
fuzz_sc <- c()
for (i in 1:nrow(datos2)) {
for (j in 4:length(datos2)) {
fuzz_sc <- c(fuzz_sc, funcion_sc(i,j)+SC)
}
}
funcion_sc(1,4)
datos2[1,4]-datos$cota[1]
datos2[[1,4]]-datos$cota[1]
funcion_sc <- function(i,j){
AL <- datos2[[i,j]]-datos$cota[i]
AI1 <- datos2[[i,j]]
AI2 <- datos2[[i,j]]
AU <- datos2[[i,j]]+datos$cota[i]
A <- TrapezoidalFuzzyNumber(AL,AI1, AI2, AU)
return (A)
}
SC <- TrapezoidalFuzzyNumber(0,0,0,0)
fuzz_sc <- c()
for (i in 1:nrow(datos2)) {
for (j in 4:length(datos2)) {
fuzz_sc <- c(fuzz_sc, funcion_sc(i,j))
}
}
funcion_sc(1,4)
funcion_sc(1,5)
for (j in 4:length(datos2)) {
fuzz_sc <- funcion_sc(1,j)+fuzz_sc
}
fuzz_sc <- c()
for (j in 4:length(datos2)) {
fuzz_sc <- funcion_sc(1,j)+fuzz_sc
}
for (j in 4:length(datos2)) {
fuzz_sc <- funcion_sc(2,j)+fuzz_sc
}
SC <- TrapezoidalFuzzyNumber(0,0,0,0)
for (j in 4:length(datos2)) {
SC <- funcion_sc(2,j)+SC
}
sc
SC
for (j in 4:length(datos2)) {
SC <- funcion_sc(2,j)+SC
SC <- SC*(1/11)
}
SC
funcion_sc <- function(i,j){
AL <- (datos2[[i,j]])/12-datos$cota[i]
AI1 <- (datos2[[i,j]])/12
AI2 <- (datos2[[i,j]])/12
AU <- (datos2[[i,j]])/12+datos$cota[i]
A <- TrapezoidalFuzzyNumber(AL,AI1, AI2, AU)
return (A)
}
for (j in 4:length(datos2)) {
SC <- funcion_sc(2,j)+SC
}
SC
for (j in 4:length(datos2)) {
SC <- funcion_sc(1,j)+SC
}
funcion_sc <- function(i,j){
AL <- (datos2[[i,j]])/12-datos$cota[i]*runif(1)
AI1 <- (datos2[[i,j]])/12
AI2 <- (datos2[[i,j]])/12
AU <- (datos2[[i,j]])/12+datos$cota[i]
A <- TrapezoidalFuzzyNumber(AL,AI1, AI2, AU)
return (A)
}
for (j in 4:length(datos2)) {
SC <- funcion_sc(1,j)+SC
}
SC
runif(1)
runif(1)
runif(1)
datos$cota[1]*runif(1)
funcion_sc <- function(i,j){
AL <- (datos2[[i,j]]-datos$cota[i]*runif(1))/12
AI1 <- (datos2[[i,j]])/12
AI2 <- (datos2[[i,j]])/12
AU <- (datos2[[i,j]])/12+datos$cota[i]
A <- TrapezoidalFuzzyNumber(AL,AI1, AI2, AU)
return (A)
}
for (j in 4:length(datos2)) {
SC <- funcion_sc(1,j)+SC
}
SC
(datos2[[1,4]]-datos$cota[1]*runif(1))/12
(datos2[[1,5]]-datos$cota[1]*runif(1))/12
(datos2[[1,6]]-datos$cota[1]*runif(1))/12
(datos2[[1,7]]-datos$cota[1]*runif(1))/12
SC <- TrapezoidalFuzzyNumber(0,0,0,0)
for (j in 4:length(datos2)) {
SC <- funcion_sc(1,j)+SC
}
SC
funcion_sc <- function(i,j){
AL <- (datos2[[i,j]]-datos$cota[i]*runif(1))/12
AI1 <- (datos2[[i,j]])/12
AI2 <- (datos2[[i,j]])/12
AU <- (datos2[[i,j]]+datos$cota[i]*runif(1))/12
A <- TrapezoidalFuzzyNumber(AL,AI1, AI2, AU)
return (A)
}
for (j in 4:length(datos2)) {
SC <- funcion_sc(1,j)+SC
}
SC <- TrapezoidalFuzzyNumber(0,0,0,0)
for (i in 1:nrow(datos2)) {
for (j in 4:length(datos2)) {
SC <- funcion_sc(i,j)+SC
}
}
SC
fuzz_sc <- c()
for (i in 1:nrow(datos2)) {
for (j in 4:length(datos2)) {
fuzz_sc<- c(SC,funcion_sc(i,j)+SC)
}
}
SC <- TrapezoidalFuzzyNumber(0,0,0,0)
fuzz_sc <- c()
for (j in 4:length(datos2)) {
fuzz_sc<- c(SC,funcion_sc(i,j)+SC)
}
for (j in 4:length(datos2)) {
fuzz_sc<- c(SC,funcion_sc(1,j)+SC)
}
SC <- TrapezoidalFuzzyNumber(0,0,0,0)
fuzz_sc <- c()
for (j in 4:length(datos2)) {
fuzz_sc<- c(SC,funcion_sc(1,j)+SC)
}
for (j in 4:length(datos2)) {
fuzz_sc[1,j]<- c(SC,funcion_sc(1,j)+SC)
}
for (j in 4:length(datos2)) {
fuzz_sc[1,1]<- c(SC,funcion_sc(1,j)+SC)
}
fuzz_sc[1,1]<- funcion_sc(1,j)+SC
for (j in 4:length(datos2)) {
fuzz_sc[1,1]<- funcion_sc(1,j)+SC
}
for (j in 4:length(datos2)) {
funcion_sc(1,j)+SC
}
SC
for (j in 4:length(datos2)) {
SC <- funcion_sc(1,j)+SC
}
SC
?apply
funcionfrec <- function(x, alp, n, m, k1, k2){
conA <- ifelse((alphacut(x, alp)[1] >= k1 && alphacut(x, alp)[2] <= k2), 1, 0) # contenido
intA <- ifelse(((alphacut(x, alp)[1] > k1 && alphacut(x, alp)[1] < k2 && alphacut(x, alp)[2] > k2)
|| (alphacut(x, alp)[1] < k1 && alphacut(x, alp)[2] > k1 && alphacut(x, alp)[2] < k2)
|| (alphacut(x, alp)[1] < k1 && alphacut(x, alp)[2] > k2)
|| conA == 1), 1, 0) # intercepto
freccon <- (conA*m)/n
frecint <- (intA*m)/n
frecf <- ifelse(freccon == 0, frecint, freccon)
return(c(freccon,frecint,frecf))
}
k1 <- 20
k2 <- 30
plot(0,0, xlim=c(0,1), ylim=c(0,1))
for (i in seq(0, 1, by = 0.2)) {
for (n in 1:length(fuzz_euro)) {
points(funcionfrec(fuzz_euro[[n]],i,length(fuzz_euro),n,k1,k2)[1],i, col=1)
points(funcionfrec(fuzz_euro[[n]],i,length(fuzz_euro),n,k1,k2)[2],i, col=2)
#points(funcionfrec(N[[n]],i,length(N),n,k1,k2)[3],i, col=1)
}
}
length(fuzz_euro)
funcionfrec(fuzz_euro[[1]]
)
funcionfrec(fuzz_euro[[1]],0.2,length(fuzz_euro),1,k1,k2)
scs <- c()
SC <- TrapezoidalFuzzyNumber(0,0,0,0)
for (i in 1: nrow(datos2)){
for (j in 4:length(datos2)) {
SC <- funcion_sc(1,j)+SC
}
scs[i]<- sc
sc=TrapezoidalFuzzyNumber(0,0,0,0)
}
SC <- TrapezoidalFuzzyNumber(0,0,0,0)
for (i in 1: nrow(datos2)){
for (j in 4:length(datos2)) {
SC <- funcion_sc(1,j)+SC
}
scs[i]<- sc
SC=TrapezoidalFuzzyNumber(0,0,0,0)
}
scs <- c()
for (i in 1: nrow(datos2)){
for (j in 4:length(datos2)) {
SC <- funcion_sc(1,j)+SC
}
scs[i]<- sc
SC=TrapezoidalFuzzyNumber(0,0,0,0)
}
scs <- c()
for (i in 1: nrow(datos2)){
for (j in 4:length(datos2)) {
SC <- funcion_sc(i,j)+SC
}
scs[i]<- sc
SC=TrapezoidalFuzzyNumber(0,0,0,0)
}
for (i in 1: nrow(datos2)){
for (j in 4:length(datos2)) {
SC <- funcion_sc(i,j)+SC
}
scs[i]<- SC
SC=TrapezoidalFuzzyNumber(0,0,0,0)
}
scs <- c()
for (i in 1: nrow(datos2)){
for (j in 4:length(datos2)) {
SC <- funcion_sc(i,j)+SC
}
scs[i]<- SC
SC=TrapezoidalFuzzyNumber(0,0,0,0)
}
for (i in 1: nrow(datos2)){
for (j in 4:length(datos2)) {
SC <- funcion_sc(i,j)+SC
}
scs[i]<- SC
SC=TrapezoidalFuzzyNumber(0,0,0,0)
}
for (j in 4:length(datos2)) {
SC <- funcion_sc(i,j)+SC
}
scs[i]<- SC
scs <- c()
for (i in 1: nrow(datos2)){
for (j in 4:length(datos2)) {
SC <- funcion_sc(i,j)+SC
}
scs[i]<- c(SC)
SC=TrapezoidalFuzzyNumber(0,0,0,0)
}
view(scs)
SC <- TrapezoidalFuzzyNumber(0,0,0,0)
scs <- c()
for (i in 1: nrow(datos2)){
for (j in 4:length(datos2)) {
SC <- funcion_sc(i,j)+SC
}
scs[i] <- c(SC)
SC=TrapezoidalFuzzyNumber(0,0,0,0)
}
view(scs)
View(scs)
funcionfrec <- function(x, alp, n, m, k1, k2){
conA <- ifelse((alphacut(x, alp)[1] >= k1 && alphacut(x, alp)[2] <= k2), 1, 0) # contenido
intA <- ifelse(((alphacut(x, alp)[1] > k1 && alphacut(x, alp)[1] < k2 && alphacut(x, alp)[2] > k2)
|| (alphacut(x, alp)[1] < k1 && alphacut(x, alp)[2] > k1 && alphacut(x, alp)[2] < k2)
|| (alphacut(x, alp)[1] < k1 && alphacut(x, alp)[2] > k2)
|| conA == 1), 1, 0) # intercepto
freccon <- (conA*m)/n
frecint <- (intA*m)/n
frecf <- ifelse(freccon == 0, frecint, freccon)
return(c(freccon,frecint,frecf))
}
funcionfrec <- function(x, alp, n, m, k1, k2){
conA <- ifelse((alphacut(x, alp)[1] >= k1 && alphacut(x, alp)[2] <= k2), 1, 0) # contenido
intA <- ifelse(((alphacut(x, alp)[1] > k1 && alphacut(x, alp)[1] < k2 && alphacut(x, alp)[2] > k2)
|| (alphacut(x, alp)[1] < k1 && alphacut(x, alp)[2] > k1 && alphacut(x, alp)[2] < k2)
|| (alphacut(x, alp)[1] < k1 && alphacut(x, alp)[2] > k2)
|| conA == 1), 1, 0) # intercepto
freccon <- (conA*m)/n
frecint <- (intA*m)/n
frecf <- ifelse(freccon == 0, frecint, freccon)
return(c(freccon,frecint,frecf))
}
length(scs)
plot(0,0, xlim=c(0,100), ylim=c(0,1))
for (i in seq(0, 1, by = 0.2)) {
for (n in 1:length(scs)) {
points(funcionfrec(scs[[n]],i,length(scs),n,k1,k2)[1],i, col=1)
points(funcionfrec(scs[[n]],i,length(scs),n,k1,k2)[2],i, col=2)
#points(funcionfrec(N[[n]],i,length(N),n,k1,k2)[3],i, col=1)
}
}
plot(0,0, xlim=c(0,1), ylim=c(0,1))
for (i in seq(0, 1, by = 0.2)) {
for (n in 1:length(scs)) {
points(funcionfrec(scs[[n]],i,length(scs),n,k1,k2)[1],i, col=1)
points(funcionfrec(scs[[n]],i,length(scs),n,k1,k2)[2],i, col=2)
#points(funcionfrec(N[[n]],i,length(N),n,k1,k2)[3],i, col=1)
}
}
